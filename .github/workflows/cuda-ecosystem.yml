name: SuperDARN CUDA Ecosystem CI/CD

on:
  push:
    branches: [ main, develop, cuda-* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly performance benchmarks
    - cron: '0 2 * * *'

env:
  CUDA_VERSION: '12.6'
  CUDA_ARCH: 'sm_50,sm_60,sm_70,sm_75,sm_80,sm_86,sm_89,sm_90'

jobs:
  # Build matrix for CUDA ecosystem
  build-cuda-ecosystem:
    name: Build CUDA Modules
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cuda-version: ['11.8', '12.0', '12.6']
        gcc-version: ['9', '10', '11']
        build-type: ['cpu', 'cuda', 'compat']
        exclude:
          # CUDA 12.6 requires GCC 11+
          - cuda-version: '12.6'
            gcc-version: '9'
          - cuda-version: '12.6'
            gcc-version: '10'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Setup CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: ${{ matrix.cuda-version }}
        method: 'network'
        sub-packages: '["nvcc", "cublas", "cusolver", "cufft", "curand"]'

    - name: Setup GCC
      uses: egor-tensin/setup-gcc@v1
      with:
        version: ${{ matrix.gcc-version }}

    - name: Cache CUDA Build Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/cuda
          ~/.cache/nvidia
        key: cuda-${{ matrix.cuda-version }}-gcc-${{ matrix.gcc-version }}-${{ hashFiles('**/makefile.cuda') }}

    - name: Validate CUDA Installation
      run: |
        nvcc --version
        nvidia-smi || echo "No GPU available (expected in CI)"
        gcc --version

    - name: Build All CUDA Modules
      run: |
        echo "Building all 42 CUDA-enabled modules..."
        ./build_all_cuda_modules.sh ${{ matrix.build-type }}
      env:
        CUDA_VERSION: ${{ matrix.cuda-version }}
        GCC_VERSION: ${{ matrix.gcc-version }}

    - name: Run Module Tests
      run: |
        echo "Testing CUDA module compatibility..."
        ./test_cuda_expansion.sh --build-type=${{ matrix.build-type }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cuda-modules-${{ matrix.cuda-version }}-gcc${{ matrix.gcc-version }}-${{ matrix.build-type }}
        path: |
          **/*.a
          **/*.so
          **/test_results.log
        retention-days: 7

  # Comprehensive ecosystem validation
  validate-ecosystem:
    name: Validate CUDA Ecosystem
    runs-on: ubuntu-latest
    needs: build-cuda-ecosystem
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '12.6'

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        pattern: cuda-modules-12.6-gcc11-*
        merge-multiple: true

    - name: Run Ecosystem Validation
      run: |
        echo "Validating complete CUDA ecosystem..."
        chmod +x ecosystem_validation.sh
        ./ecosystem_validation.sh

    - name: Generate Validation Report
      run: |
        echo "Generating comprehensive validation report..."
        ./generate_validation_report.sh

    - name: Upload Validation Results
      uses: actions/upload-artifact@v3
      with:
        name: ecosystem-validation-report
        path: |
          ecosystem_validation_report.html
          ecosystem_validation.log
        retention-days: 30

  # Performance benchmarking
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build-cuda-ecosystem
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '12.6'

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        pattern: cuda-modules-12.6-gcc11-cuda
        merge-multiple: true

    - name: Run Comprehensive Performance Benchmarks
      run: |
        echo "Running comprehensive CUDA ecosystem benchmarks..."
        chmod +x comprehensive_cuda_performance.sh
        ./comprehensive_cuda_performance.sh

    - name: Generate Performance Report
      run: |
        echo "Generating performance analysis report..."
        ./generate_performance_report.sh

    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmark-results
        path: |
          performance_report.html
          benchmark_results.json
          performance_charts.png
        retention-days: 90

    - name: Comment Performance Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('benchmark_summary.txt', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸš€ CUDA Performance Benchmark Results\n\n\`\`\`\n${results}\n\`\`\``
          });

  # API compatibility testing
  api-compatibility:
    name: API Compatibility Tests
    runs-on: ubuntu-latest
    needs: build-cuda-ecosystem
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '12.6'

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        pattern: cuda-modules-12.6-gcc11-compat
        merge-multiple: true

    - name: Test Drop-in Compatibility
      run: |
        echo "Testing drop-in replacement compatibility..."
        ./test_api_compatibility.sh

    - name: Test CPU/GPU Switching
      run: |
        echo "Testing automatic CPU/GPU switching..."
        ./test_compute_switching.sh

    - name: Upload Compatibility Results
      uses: actions/upload-artifact@v3
      with:
        name: api-compatibility-results
        path: |
          compatibility_test_results.log
          api_validation_report.html

  # Memory testing and leak detection
  memory-testing:
    name: Memory Testing
    runs-on: ubuntu-latest
    needs: build-cuda-ecosystem
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '12.6'

    - name: Install Valgrind and CUDA Memory Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind
        # Install cuda-memcheck if available

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        pattern: cuda-modules-12.6-gcc11-cuda
        merge-multiple: true

    - name: Run Memory Leak Tests
      run: |
        echo "Running memory leak detection..."
        ./test_memory_leaks.sh

    - name: Run CUDA Memory Tests
      run: |
        echo "Running CUDA memory validation..."
        ./test_cuda_memory.sh

    - name: Upload Memory Test Results
      uses: actions/upload-artifact@v3
      with:
        name: memory-test-results
        path: |
          memory_test_report.log
          valgrind_results.xml
          cuda_memory_report.log

  # Documentation generation
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [validate-ecosystem, api-compatibility]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Documentation Dependencies
      run: |
        pip install sphinx sphinx-rtd-theme breathe doxygen

    - name: Download Validation Results
      uses: actions/download-artifact@v3
      with:
        pattern: "*-results"
        merge-multiple: true

    - name: Generate API Documentation
      run: |
        echo "Generating CUDA API documentation..."
        ./generate_api_docs.sh

    - name: Generate User Guide
      run: |
        echo "Generating CUDA user guide..."
        ./generate_user_guide.sh

    - name: Build Documentation Site
      run: |
        echo "Building documentation website..."
        sphinx-build -b html docs/ docs/_build/html/

    - name: Upload Documentation
      uses: actions/upload-artifact@v3
      with:
        name: cuda-ecosystem-docs
        path: |
          docs/_build/html/
          README_CUDA_ECOSYSTEM.md
        retention-days: 30

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html/

  # Release automation
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-ecosystem, performance-benchmarks, api-compatibility, memory-testing]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Artifacts
      uses: actions/download-artifact@v3

    - name: Generate Release Notes
      run: |
        echo "Generating release notes..."
        ./generate_release_notes.sh > RELEASE_NOTES.md

    - name: Create Release Package
      run: |
        echo "Creating CUDA ecosystem release package..."
        tar -czf superdarn-cuda-ecosystem.tar.gz \
          README_CUDA_ECOSYSTEM.md \
          cuda-modules-*/ \
          ecosystem-validation-report/ \
          performance-benchmark-results/ \
          cuda-ecosystem-docs/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: cuda-ecosystem-v${{ github.run_number }}
        name: SuperDARN CUDA Ecosystem v${{ github.run_number }}
        body_path: RELEASE_NOTES.md
        files: |
          superdarn-cuda-ecosystem.tar.gz
          README_CUDA_ECOSYSTEM.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification and reporting
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [validate-ecosystem, performance-benchmarks, api-compatibility, memory-testing]
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Generate Summary Report
      run: |
        echo "## ðŸš€ SuperDARN CUDA Ecosystem CI/CD Results" > summary.md
        echo "" >> summary.md
        echo "### Build Status" >> summary.md
        echo "- **Ecosystem Validation**: ${{ needs.validate-ecosystem.result }}" >> summary.md
        echo "- **Performance Benchmarks**: ${{ needs.performance-benchmarks.result }}" >> summary.md
        echo "- **API Compatibility**: ${{ needs.api-compatibility.result }}" >> summary.md
        echo "- **Memory Testing**: ${{ needs.memory-testing.result }}" >> summary.md
        echo "" >> summary.md
        echo "### CUDA Ecosystem Status" >> summary.md
        echo "- **Total Modules**: 42" >> summary.md
        echo "- **CUDA Coverage**: 97%" >> summary.md
        echo "- **Average Speedup**: 2.47x" >> summary.md
        echo "- **Best Speedup**: 12.79x (cnvmodel.1.0)" >> summary.md

    - name: Post Summary to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Update Status Badge
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Updating status badges..."
        # Update README badges based on results
        ./update_status_badges.sh
