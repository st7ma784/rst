# makefile_array.nmake - NMAKE makefile for SuperDARN FitACF v3.0 Array Implementation (Windows)
#
# This makefile builds both the original linked list implementation
# and the new array-based implementation with OpenMP parallelization using Visual Studio tools
#

# Compiler and tools
CC = cl
LIB = lib
LINK = link

# Compiler flags
CFLAGS = /nologo /W3 /EHsc /MD
OPENMP_FLAGS = /openmp
OPTIMIZATION_FLAGS = /O2 /GL /arch:AVX2
DEBUG_FLAGS = /Zi /Od /DEBUG /DDEBUG_ARRAY
ARRAY_FLAGS = /DUSE_ARRAY_IMPLEMENTATION

# Include paths (adjust these to match your SuperDARN installation)
INCLUDES = /I"..\include" /I"$(IPATH)\base" /I"$(IPATH)\general" /I"$(IPATH)\superdarn\fit" /I"$(IPATH)\superdarn"

# Library paths
LIBPATH = $(LIBPATH)

# Source files for linked list implementation
SRC_LLIST = determinations.c fitacftoplevel.c fitting.c leastsquares.c \
            llist.c preprocessing.c

# Source files for array implementation  
SRC_ARRAY = determinations.c fitacftoplevel_array.c fitting_array.c \
            leastsquares.c fit_structures_array.c preprocessing_array.c

# Test source files
SRC_TEST = ..\test\test_fitacf_comprehensive.c ..\test\test_array_vs_llist.c

# Object files for linked list implementation
OBJS_LLIST = determinations.obj fitacftoplevel.obj fitting.obj leastsquares.obj \
             llist.obj preprocessing.obj

# Object files for array implementation
OBJS_ARRAY = determinations_array.obj fitacftoplevel_array.obj fitting_array.obj \
             leastsquares_array.obj fit_structures_array.obj preprocessing_array.obj

# Test object files
OBJS_TEST = test_fitacf_comprehensive.obj test_array_vs_llist.obj

# Library names
LIB_LLIST = fitacf_llist.lib
LIB_ARRAY = fitacf_array.lib

# Default target - build both implementations
all: $(LIB_LLIST) $(LIB_ARRAY) tests

# Original linked list implementation
$(LIB_LLIST): $(OBJS_LLIST)
	$(LIB) /nologo /out:$(LIB_LLIST) $(OBJS_LLIST)
	@echo Built linked list implementation: $(LIB_LLIST)

# Array-based implementation with OpenMP
$(LIB_ARRAY): $(OBJS_ARRAY)
	$(LIB) /nologo /out:$(LIB_ARRAY) $(OBJS_ARRAY)
	@echo Built array implementation: $(LIB_ARRAY)

# Test executables
tests: test_baseline.exe test_comparison.exe

test_baseline.exe: test_fitacf_comprehensive.obj $(OBJS_LLIST)
	$(LINK) /nologo /out:test_baseline.exe test_fitacf_comprehensive.obj $(OBJS_LLIST)
	@echo Built baseline test: test_baseline.exe

test_comparison.exe: test_array_vs_llist.obj $(OBJS_LLIST) $(OBJS_ARRAY)
	$(LINK) /nologo $(OPENMP_FLAGS) /out:test_comparison.exe test_array_vs_llist.obj $(OBJS_LLIST) $(OBJS_ARRAY)
	@echo Built comparison test: test_comparison.exe

# Debug builds
debug: CFLAGS = $(CFLAGS) $(DEBUG_FLAGS) $(OPENMP_FLAGS)
debug: $(LIB_ARRAY)
	copy $(LIB_ARRAY) fitacf_array_debug.lib
	@echo Built debug version: fitacf_array_debug.lib

# Performance optimized version
performance: CFLAGS = $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) /DNDEBUG
performance: $(LIB_ARRAY)
	copy $(LIB_ARRAY) fitacf_array_perf.lib
	@echo Built performance version: fitacf_array_perf.lib

# Compilation rules for linked list implementation
determinations.obj: determinations.c
	$(CC) $(CFLAGS) $(INCLUDES) /c determinations.c

fitacftoplevel.obj: fitacftoplevel.c
	$(CC) $(CFLAGS) $(INCLUDES) /c fitacftoplevel.c

fitting.obj: fitting.c
	$(CC) $(CFLAGS) $(INCLUDES) /c fitting.c

leastsquares.obj: leastsquares.c
	$(CC) $(CFLAGS) $(INCLUDES) /c leastsquares.c

llist.obj: llist.c
	$(CC) $(CFLAGS) $(INCLUDES) /c llist.c

preprocessing.obj: preprocessing.c
	$(CC) $(CFLAGS) $(INCLUDES) /c preprocessing.c

# Compilation rules for array implementation (with different object names)
determinations_array.obj: determinations.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) $(INCLUDES) /Fo:determinations_array.obj /c determinations.c

fitacftoplevel_array.obj: fitacftoplevel_array.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) $(INCLUDES) /c fitacftoplevel_array.c

fitting_array.obj: fitting_array.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) $(INCLUDES) /c fitting_array.c

leastsquares_array.obj: leastsquares.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) $(INCLUDES) /Fo:leastsquares_array.obj /c leastsquares.c

fit_structures_array.obj: fit_structures_array.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) $(INCLUDES) /c fit_structures_array.c

preprocessing_array.obj: preprocessing_array.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) $(INCLUDES) /c preprocessing_array.c

# Test compilation rules
test_fitacf_comprehensive.obj: ..\test\test_fitacf_comprehensive.c
	$(CC) $(CFLAGS) $(INCLUDES) /c ..\test\test_fitacf_comprehensive.c

test_array_vs_llist.obj: ..\test\test_array_vs_llist.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(ARRAY_FLAGS) $(INCLUDES) /c ..\test\test_array_vs_llist.c

# Install targets
install: install_llist install_array

install_llist: $(LIB_LLIST)
	copy $(LIB_LLIST) "$(LIBPATH)\$(LIB_LLIST)"
	@echo Installed linked list implementation

install_array: $(LIB_ARRAY)
	copy $(LIB_ARRAY) "$(LIBPATH)\$(LIB_ARRAY)"
	@echo Installed array implementation

# Clean targets
clean:
	-del /q *.obj *.lib *.exe *.pdb *.ilk test_baseline.exe test_comparison.exe 2>nul
	@echo Cleaned build files

clean_all: clean
	-del /q "$(LIBPATH)\fitacf_*.lib" 2>nul
	@echo Cleaned all files including installed libraries

# Run tests
run_tests: tests
	@echo Running baseline tests...
	test_baseline.exe
	@echo Running comparison tests...
	test_comparison.exe

# Help target
help:
	@echo Available targets:
	@echo   all          - Build both linked list and array implementations
	@echo   $(LIB_LLIST) - Build original linked list implementation
	@echo   $(LIB_ARRAY) - Build array-based implementation with OpenMP
	@echo   tests        - Build test suite
	@echo   debug        - Build debug version with additional symbols
	@echo   performance  - Build optimized performance version
	@echo   install      - Install both implementations
	@echo   run_tests    - Build and run all tests
	@echo   clean        - Remove build files
	@echo   clean_all    - Remove all files including installed libraries
	@echo   help         - Show this help message
	@echo.
	@echo Implementation flags:
	@echo   USE_ARRAY_IMPLEMENTATION - Enable array-based code paths
	@echo   DEBUG_ARRAY             - Enable array debugging output
	@echo   NDEBUG                  - Disable debugging (performance build)
	@echo.
	@echo Usage examples:
	@echo   nmake /f makefile_array.nmake
	@echo   nmake /f makefile_array.nmake debug
	@echo   nmake /f makefile_array.nmake performance
	@echo   nmake /f makefile_array.nmake run_tests

# Phony targets
.PHONY: all tests debug performance install install_llist install_array clean clean_all run_tests help
