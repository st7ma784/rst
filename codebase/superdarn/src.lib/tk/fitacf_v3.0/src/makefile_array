# makefile for fitacf 3.0 - Array-Based Implementation
#
# This makefile builds both the original linked list implementation
# and the new array-based implementation with OpenMP parallelization
#


# Compiler flags for parallel processing
OPENMP_FLAGS = -fopenmp
OPTIMIZATION_FLAGS = -O3 -march=native -ftree-vectorize
DEBUG_FLAGS = -g -DDEBUG_ARRAY
ARRAY_FLAGS = -DUSE_ARRAY_IMPLEMENTATION

# Include paths
INCLUDE= -I$(IPATH)/base -I$(IPATH)/general -I$(IPATH)/superdarn/fit \
         -I$(IPATH)/superdarn -I../include

# Original source files (linked list implementation)
SRC_LLIST = determinations.c fitacftoplevel.c fitting.c leastsquares.c \
            llist.c preprocessing.c
HDR_LLIST = determinations.h fit_structures.h leastsquares.h \
            preprocessing.h fitacftoplevel.h fitting.h llist.h

# Array-based source files  
SRC_ARRAY = determinations.c fitacftoplevel_array.c fitting_array.c \
            leastsquares.c fit_structures_array.c preprocessing_array.c
HDR_ARRAY = determinations.h fit_structures_array.h leastsquares.h \
            preprocessing.h fitacftoplevel.h fitting.h

# Test source files
SRC_TEST = test_fitacf_comprehensive.c test_array_vs_llist.c
HDR_TEST = 

# Object files for linked list implementation
OBJS_LLIST = determinations.o fitacftoplevel.o fitting.o leastsquares.o \
             llist.o preprocessing.o

# Object files for array implementation
OBJS_ARRAY = determinations.o fitacftoplevel_array.o fitting_array.o \
             leastsquares.o fit_structures_array.o preprocessing_array.o

# Test object files
OBJS_TEST = test_fitacf_comprehensive.o test_array_vs_llist.o

# Library paths
INC=$(IPATH)/superdarn
DSTPATH=$(LIBPATH)
OUTPUT=fitacf
LINK="3.0"

# Default target - build both implementations
all: fitacf_llist fitacf_array tests

# Original linked list implementation
fitacf_llist: $(OBJS_LLIST)
	$(AR) $(ARFLAGS) lib$(OUTPUT)_llist.a $(OBJS_LLIST)
	cp lib$(OUTPUT)_llist.a $(DSTPATH)/lib$(OUTPUT)_llist.a
	@echo "Built linked list implementation: lib$(OUTPUT)_llist.a"

# Array-based implementation with OpenMP
fitacf_array: CFLAGS += $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS)
fitacf_array: $(OBJS_ARRAY)
	$(AR) $(ARFLAGS) lib$(OUTPUT)_array.a $(OBJS_ARRAY)
	cp lib$(OUTPUT)_array.a $(DSTPATH)/lib$(OUTPUT)_array.a
	@echo "Built array implementation: lib$(OUTPUT)_array.a"

# Test suite
tests: test_baseline test_comparison test_performance

# Baseline test for linked list implementation
test_baseline: test_fitacf_comprehensive.o $(OBJS_LLIST)
	$(CC) $(CFLAGS) -o test_baseline test_fitacf_comprehensive.o $(OBJS_LLIST) $(LIBS)
	@echo "Built baseline test: test_baseline"

# Comparison test between implementations
test_comparison: CFLAGS += $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS)
test_comparison: test_array_vs_llist.o $(OBJS_LLIST) $(OBJS_ARRAY)
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) -o test_comparison test_array_vs_llist.o \
		$(OBJS_LLIST) $(OBJS_ARRAY) $(LIBS)
	@echo "Built comparison test: test_comparison"

# Performance test for comprehensive benchmarking
test_performance: CFLAGS += $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS)
test_performance: test_fitacf_performance_comprehensive.o $(OBJS_LLIST) $(OBJS_ARRAY)
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) -o test_performance test_fitacf_performance_comprehensive.o \
		$(OBJS_LLIST) $(OBJS_ARRAY) $(LIBS)
	@echo "Built performance test: test_performance"

# Debug version with additional debugging symbols
debug: CFLAGS += $(DEBUG_FLAGS) $(OPENMP_FLAGS)
debug: $(OBJS_ARRAY)
	$(AR) $(ARFLAGS) lib$(OUTPUT)_array_debug.a $(OBJS_ARRAY)
	cp lib$(OUTPUT)_array_debug.a $(DSTPATH)/lib$(OUTPUT)_array_debug.a
	@echo "Built debug version: lib$(OUTPUT)_array_debug.a"

# Performance optimized version
performance: CFLAGS += $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) -DNDEBUG
performance: $(OBJS_ARRAY)
	$(AR) $(ARFLAGS) lib$(OUTPUT)_array_perf.a $(OBJS_ARRAY)
	cp lib$(OUTPUT)_array_perf.a $(DSTPATH)/lib$(OUTPUT)_array_perf.a
	@echo "Built performance version: lib$(OUTPUT)_array_perf.a"

# Individual compilation rules with specific flags
fitacftoplevel_array.o: fitacftoplevel_array.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) \
		$(INCLUDE) -c fitacftoplevel_array.c

fitting_array.o: fitting_array.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) \
		$(INCLUDE) -c fitting_array.c

preprocessing_array.o: preprocessing_array.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) \
		$(INCLUDE) -c preprocessing_array.c

fit_structures_array.o: fit_structures_array.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(OPTIMIZATION_FLAGS) $(ARRAY_FLAGS) \
		$(INCLUDE) -c fit_structures_array.c

# Test compilation rules
test_fitacf_comprehensive.o: ../test/test_fitacf_comprehensive.c
	$(CC) $(CFLAGS) $(INCLUDE) -c ../test/test_fitacf_comprehensive.c

test_array_vs_llist.o: ../test/test_array_vs_llist.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(ARRAY_FLAGS) $(INCLUDE) \
		-c ../test/test_array_vs_llist.c

test_fitacf_performance_comprehensive.o: ../test/test_fitacf_performance_comprehensive.c
	$(CC) $(CFLAGS) $(OPENMP_FLAGS) $(ARRAY_FLAGS) $(INCLUDE) \
		-c ../test/test_fitacf_performance_comprehensive.c

# Install targets
install: install_llist install_array

install_llist: fitacf_llist
	cp lib$(OUTPUT)_llist.a $(DSTPATH)/lib$(OUTPUT)_llist.a
	@echo "Installed linked list implementation"

install_array: fitacf_array
	cp lib$(OUTPUT)_array.a $(DSTPATH)/lib$(OUTPUT)_array.a
	@echo "Installed array implementation"

# Clean targets
clean:
	rm -f *.o *.a test_baseline test_comparison test_performance
	@echo "Cleaned build files"

clean_all: clean
	rm -f $(DSTPATH)/lib$(OUTPUT)_*.a
	@echo "Cleaned all files including installed libraries"

# Help target
help:
	@echo "Available targets:"
	@echo "  all          - Build both linked list and array implementations"
	@echo "  fitacf_llist - Build original linked list implementation"
	@echo "  fitacf_array - Build array-based implementation with OpenMP"
	@echo "  tests        - Build test suite (test_baseline, test_comparison, test_performance)"
	@echo "  test_baseline - Build baseline test for linked list implementation"
	@echo "  test_comparison - Build comparison test between implementations"  
	@echo "  test_performance - Build comprehensive performance benchmark test"
	@echo "  debug        - Build debug version with additional symbols"
	@echo "  performance  - Build optimized performance version"
	@echo "  install      - Install both implementations"
	@echo "  clean        - Remove build files"
	@echo "  clean_all    - Remove all files including installed libraries"
	@echo "  help         - Show this help message"
	@echo ""
	@echo "Implementation flags:"
	@echo "  USE_ARRAY_IMPLEMENTATION - Enable array-based code paths"
	@echo "  DEBUG_ARRAY             - Enable array debugging output"
	@echo "  NDEBUG                  - Disable debugging (performance build)"

# Phony targets
.PHONY: all fitacf_llist fitacf_array tests test_baseline test_comparison \
        debug performance install install_llist install_array clean \
        clean_all help

# Include system-specific makefile rules
# include $(MAKELIB).$(SYSTEM)
